@use "sass:math";
@use "functions" as f;
@use "variables" as v;
@use "breakpoints" as b;

@mixin headings {
  font-family: v.$font-accent;
  font-weight: map-get($map: v.$font-weights, $key: semi-bold);
  @content;
}

@mixin font-size($fs-map, $fs-breakpoints: b.$breakpoints) {
  @each $fs-breakpoint, $fs-size in $fs-map {
    @if $fs-breakpoint == "desktop" {
      @include create-font-size($fs-size);
    } @else {
      @if map-has-key($map: $fs-breakpoints, $key: $fs-breakpoint) {
        $fs-breakpoint: map-get(
          $map: $fs-breakpoints,
          $key: $fs-breakpoint,
        );
      }
      @media (width <= $fs-breakpoint) {
        @include create-font-size($fs-size);
      }
    }
  }
}

@mixin create-font-size($fs-size) {
  @if type-of($value: $fs-size) == "list" {
    font-size: f.pxToRem(nth($list: $fs-size, $n: 1));
    @if (length($list: $fs-size) > 1) {
      line-height: math.div(
        f.removeUnit(nth($list: $fs-size, $n: 2)),
        f.removeUnit(nth($list: $fs-size, $n: 1))
      );
    }
  } @else {
    font-size: f.pxToRem($fs-size);
    line-height: 1;
  }
}

@mixin image-size($img-map, $img-breakpoints: b.$breakpoints) {
  @each $img-breakpoint, $img-size in $img-map {
    @if $img-breakpoint == "desktop" {
      @include create-image-size($img-size);
    } @else {
      @if map-has-key($map: $img-breakpoints, $key: $img-breakpoint) {
        $img-breakpoint: map-get(
          $map: $img-breakpoints,
          $key: $img-breakpoint,
        );
      }
      @media (width <= $img-breakpoint) {
        @include create-image-size($img-size);
      }
    }
  }
}

@mixin create-image-size($img-size) {
  @if type-of($value: $img-size) == "list" {
    width: nth($list: $img-size, $n: 1);
    height: nth($list: $img-size, $n: 2);
  }
}
